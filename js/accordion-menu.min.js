;(function ($, window, document, undefined) {
	"use strict";

		// undefined is used here as the undefined global variable in ECMAScript 3 is
		// mutable (ie. it can be changed by someone else). undefined isn't really being
		// passed in so we can ensure the value of it is truly undefined. In ES5, undefined
		// can no longer be modified.

		// window and document are passed through as local variable rather than global
		// as this (slightly) quickens the resolution process and can be more efficiently
		// minified (especially when both are regularly referenced in your plugin).

		// Create the defaults once
		var pluginName = "accordion",
			defaults = {
				folding : "multiple",	//multiple, single
				current : "off",		//off, on
			};

		// The actual plugin constructor
		function Plugin (element, options) {
				this.element = element;
				// extend merges the contents of two or more objects, storing the result 
				// in the first object. The first object is generally empty as we don't 
				// want to alter the default options for future instances of the plugin
				this.settings = $.extend({}, defaults, options);
				this._defaults = defaults;
				this._name = pluginName;
				this.init();
		}

		// Avoid Plugin.prototype conflicts
		$.extend(Plugin.prototype, {

				init: function () {
						// this.element = DOM Element
						// this.settings = settings object
						// call functions: this.yourOtherFunction(this.element, this.settings)
					var plugin = this;
					plugin.initialize_subtoggles(plugin);
					plugin.force_current_tree(plugin);
					if(plugin.settings.current == 'on') plugin.initialize_current_submenus(plugin);
					plugin.initialize_show_more(plugin);
					//console.log(plugin.settings);
				},

				/*
				 * Initalize the submenu toggles to open and close the submenus on click
				 */
				initialize_subtoggles: function(plugin){
					var $el = $(plugin.element);									//$el is the .secretum-accordion element
					$el.removeClass('secretum-accordion-nojs');
					//find all the subtoggles, as well as targets with disabled links, and add click callback
					$el.find('.secretum-accordion-subtoggle, .secretum-accordion-menu-item-has-children > span.secretum-accordion-target').on('click' , function(e){
						var $item = $(this).closest('.secretum-accordion-menu-item');		//find the item of this subtoggle
						plugin.toggle_submenu($item , plugin);					//toggle the submenu
						return false;												//do not allow the link to be followed
					});
				},

				/*
				 * Toggle the submenu of an item ($li) open or closed based on its current state
				 */
				toggle_submenu: function($li , plugin){
					//If the submenu is currently open, close it
					if($li.hasClass('secretum-accordion-active')){
						plugin.close_submenu($li);
					}
					//Otherwise, open the submenu
					else{
						plugin.open_submenu($li , plugin);

						//If folding is set to 'single' (one submenu open at a time), close any sibling submenus
						if(plugin.settings.folding == 'single') plugin.close_sibling_submenus($li , plugin);
					}
				},

				/*
				 * Open the submenu of item $li
				 */
				open_submenu: function($li , plugin){
					//Check if there is a submenu, first
					var $submenu = $li.find('> .secretum-accordion-submenu');
					if($submenu.length){
						//Add the active class, then slideDown the submenu
						$submenu.slideDown(400 , function(){
							$li.trigger('accordionopen');
							$li.addClass('secretum-accordion-active');
						});
					}
				},

				/*
				 * Close the submenu of item $li
				 */
				close_submenu: function($li , plugin){
					//Remove the active class, then slideUp the submenu

					// $li.removeClass('secretum-accordion-active').find('> .secretum-accordion-submenu').slideUp(400 , function(){
					// 		$li.trigger('accordionclose');
					// 	});

					$li.find('> .secretum-accordion-submenu').slideUp(400 , function(){
						$li.removeClass('secretum-accordion-active');
						$li.trigger('accordionclose');
					});
				},


				/*
				 * Close any submenus of items that are at the same level as $li
				 */
				close_sibling_submenus: function($li , plugin){
					$li.siblings().each(function(){		//Find all siblings
						plugin.close_submenu($(this));	//Close their submenus
					});
				},

				/*
				 * Open the submenu of the current menu item
				 */
				initialize_current_submenus: function(plugin) {
					$(plugin.element).find('.secretum-accordion-current-menu-item, .secretum-accordion-current-menu-ancestor, .secretum-accordion-current-menu-parent').each(function(){
					//$(plugin.element).find('.secretum-accordion-current-menu-item').each(function(){ //testing
						plugin.open_submenu($(this));
						$(this).parentsUntil('.secretum-accordion-nav' , '.secretum-accordion-menu-item:not(.secretum-accordion-active)').each(function(){
							plugin.open_submenu($(this));
						});
					});
				},

				/*
				 * Make sure that parents of current menu items are also marked as current
				 */
				force_current_tree: function(plugin) {
					$(plugin.element).find('.secretum-accordion-current-menu-item')
						.parents('.secretum-accordion-menu-item:not(.secretum-accordion-current-menu-item,.secretum-accordion-current-menu-parent,.secretum-accordion-current-menu-ancestor)')
						.addClass('secretum-accordion-current-menu-ancestor');
				},

				initialize_show_more: function(plugin){
					$(plugin.element).find('.secretum-accordion-show-more-toggle').each(function(){

						//Create Show Less element
						var $closer = $(this).clone().attr('id' , '').addClass('secretum-accordion-show-less-toggle').removeClass('secretum-accordion-show-more-toggle');
						var $closer_title = $closer.find('.secretum-accordion-target-title');
						// var $closer_icon =  $closer_title.find('i');
						// if($closer_icon.length) $closer_title.html($closer_icon);
						//$closer_title.append($(this).data('show-less'));
						$closer_title.html('<i class="secretum-accordion-icon fa fa-angle-up"></i> '+$(this).data('show-less'));
						$(this).closest('.secretum-accordion-submenu,.secretum-accordion-nav').append($closer);

						//Toggle Open on Show More
						$(this).find('> .secretum-accordion-target').on('click' , function(e){
							e.preventDefault();
							$(this).parent().toggleClass('secretum-accordion-show-less');
						});

						//Toggle Closed on Show Less
						$closer.find('> .secretum-accordion-target').on('click' , function(e){
							e.preventDefault();
							$(this).parent().siblings('.secretum-accordion-show-more-toggle').toggleClass('secretum-accordion-show-less');
						});
					});
				},
		});

		// A really lightweight plugin wrapper around the constructor,
		// preventing against multiple instantiations
		$.fn[ pluginName ] = function (options) {

			var args = arguments;

			if (options === undefined || typeof options === 'object') {
				return this.each(function() {
						if (!$.data(this, "plugin_" + pluginName)) {
								$.data(this, "plugin_" + pluginName, new Plugin(this, options));
						}
				});
			}
			else if (typeof options === 'string' && options[0] !== '_' && options !== 'init') {
				// Cache the method call to make it possible to return a value
				var returns;
				this.each(function () {
					var instance = $.data(this, 'plugin_' + pluginName);

					// Tests that there's already a plugin-instance and checks that the requested public method exists
					if (instance instanceof Plugin && typeof instance[options] === 'function') {

						// Call the method of our plugin instance, and pass it the supplied arguments.
						returns = instance[options].apply(instance, Array.prototype.slice.call(args, 1));
					}

					// Allow instances to be destroyed via the 'destroy' method
					if (options === 'destroy') {
						$.data(this, 'plugin_' + pluginName, null);
					}
				});

				// If the earlier cached method gives a value back return the value, otherwise return this to preserve chainability.
				return returns !== undefined ? returns : this;
			}
		};

})(jQuery, window, document);

(function($){

	var accordion_is_initialized = false;

	//jQuery(document).ready(function($){
	jQuery(function($) {
		initialize_accordion('document.ready');
	});

	//Backup
	$(window).bind('load' , function(){
		initialize_accordion('window.load');
	});

	function initialize_accordion(init_point){

		if(accordion_is_initialized) return;

		accordion_is_initialized = true;

		if((typeof console != "undefined") && init_point == 'window.load') console.log('Notice: Accordion initialized via ' + init_point + '.  This indicates that an unrelated error on the site prevented it from loading via the normal document ready event.');


	    //For WP Google Maps
		var maprefresher = function(){

			//WP Google Maps free
			if($(this).find('#wpgmza_map').length){
				//InitMap();
				InitMap();
			}
			//WP Google Maps Pro
			else if($(this).find('.wpgmza_map').length){
				
				for(var entry in wpgmaps_localize) {
					//console.log('init ' + wpgmaps_localize[entry]['id']);
					//InitMap(wpgmaps_localize[entry]['id'], true);

					var wpgob = wpgmaps_localize[entry];
					var gmap = MYMAP[wpgob['id']].map;
					google.maps.event.trigger(gmap, "resize");

					var lat = wpgob['map_start_lat'];
					var lng = wpgob['map_start_lng'];

					var myLatLng = new google.maps.LatLng(lat,lng);
					gmap.setCenter(myLatLng);
				}
			}
			$(this).off('accordionopen');
		};
		if(typeof InitMap == 'function') $('.secretum-accordion-menu-item').on('accordionopen' , maprefresher);

		

	}
})(jQuery);